service: sls-watch-graphql-02

frameworkVersion: '3'

plugins:
   - serverless-appsync-plugin
   - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-northeast-1

package:
  individually: true
  patterns:
    - '!node_modules/**'
    - '!mapping-templates/**'
    - '!schema.graphql'
    - '!package.json'
    - '!Frontend/**'


functions:
  watchFun:
    name: watch_Function
    handler: watch_function.handler
    package:
      patterns:
        - '!cart_functions.js'
    iamRoleStatements:
      - Effect: Allow        
        Action:
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:PutItem
        Resource: 
          - !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/WatchTable
          - { Fn::GetAtt: [watchTable, Arn] }
  cartFun:
    name: cart_Function
    handler: cart_functions.handler
    package:
      patterns:
        - '!watch_function.js'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:PutItem
        Resource: 
          - !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/WatchTable
          - !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/WatchTable/index/*
          - { Fn::GetAtt: [watchTable, Arn] }
          - !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/Cart_Table
          - { Fn::GetAtt: [cartTable, Arn] }
    


appSync:
  name: SLS_AppSync_Watch_API
  authentication: 
    type: 'API_KEY'
  apiKeys:
    - name: SomeApiKey
      description: 'My Api key'
      expiresAfter: 30d


  pipelineFunctions:
    getCartFnPipeline:
      dataSource: cartTable_DataSource
      code: resolvers/pipelines/getCarts.js
    getWatchFnPipeline:
      dataSource: watchTable_DataSource
      code: resolvers/pipelines/getWatch.js
    addToCartFnPipeline:
      dataSource: cartTable_DataSource
      code: resolvers/pipelines/addToCart.js


  resolvers:
    getWatches:
      type: Query
      field: getWatches
      kind: UNIT
      dataSource: watchTable_DataSource
      request: resolvers/unit/getWatches-request.vtl
      response: resolvers/unit/modified-response.vtl

    getWatchByCategory:
      type: Query
      field: getWatchByCategory
      kind: UNIT
      dataSource: watchTable_DataSource
      request: resolvers/unit/getWatchByCategory-request.vtl
      response: resolvers/unit/modified-response.vtl
            
    getWatch:
      type: Query
      field: getWatch
      kind: UNIT
      dataSource: watchTable_DataSource
      request: resolvers/unit/getWatch-request.vtl
      response: resolvers/unit/common-response.vtl

    getUserOrders:
      type: Query
      field: getUserOrders
      kind: UNIT
      dataSource: cartTable_DataSource
      request: resolvers/unit/getUserOrders-request.vtl
      response: resolvers/unit/modified-response.vtl

    getCarts:
      type: Query
      field: getCarts
      functions:
        - getWatchFnPipeline
        - getCartFnPipeline
    
    getUserWatchCount:
      type: Mutation
      field: getUserWatchCount
      kind: UNIT
      dataSource: awsLambdaCarts_Fun
      request: resolvers/unit/getUserWatchCount-request.vtl
      response: resolvers/unit/common-response.vtl

    addWatch:
      type: Mutation
      field: addWatch
      kind: UNIT
      dataSource: watchTable_DataSource
      request: resolvers/unit/addWatch-request.vtl
      response: resolvers/unit/common-response.vtl

    addUser:
      type: Mutation
      field: addUser
      kind: UNIT
      dataSource: userTable_DataSource
      request: resolvers/unit/addUser-request.vtl
      response: resolvers/unit/common-response.vtl

    getUser:
      type: Mutation
      field: getUser
      kind: UNIT
      dataSource: userTable_DataSource
      request: resolvers/unit/getUser-request.vtl
      response: resolvers/unit/common-response.vtl

    addCart:
      type: Mutation
      field: addCart
      functions:
        - getWatchFnPipeline
        - addToCartFnPipeline

    
        


      
  dataSources:
    awsLambdaCarts_Fun:
      type: AWS_LAMBDA
      description: 'Lambda DataSources'
      config:
        functionName: cartFun

    watchTable_DataSource:
      type: AMAZON_DYNAMODB
      description: 'Amazon DynamoDB dataSource for watch table'
      config: 
        tableName: !Ref watchTable

    cartTable_DataSource:
      type: AMAZON_DYNAMODB
      description: 'Amazon DynamoDB dataSource for cart table'
      config: 
        tableName: !Ref cartTable

    userTable_DataSource:
      type: AMAZON_DYNAMODB
      description: 'Amazon DynamoDB dataSource for user table'
      config: 
        tableName: !Ref userTable


      


resources:
  Resources:
    cartTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: Cart_Table  
        AttributeDefinitions:
          - AttributeName: "user_id"
            AttributeType: "S"
          - AttributeName: "watch_id"
            AttributeType: "N"
        KeySchema:
          - AttributeName: "user_id"
            KeyType: "HASH"
          - AttributeName: "watch_id"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3

    watchTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: WatchTable  
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
        AttributeDefinitions:
          - AttributeName: "watch_id"
            AttributeType: "N"
          - AttributeName: "category"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "watch_id"
            KeyType: "HASH"
        GlobalSecondaryIndexes:
          - IndexName: category-index
            KeySchema:
              - AttributeName: category
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 3
              WriteCapacityUnits: 3
       
    userTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: UserTable  
        AttributeDefinitions:
          - AttributeName: "email"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "email"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
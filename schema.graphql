type User {
	email: String
}

type Cart {
	user_id: String
	watch_id: Int
	count: Int
	price: Int
}

type CartCount {
	user_id: String
	watch_id: Int
	count: Int
}

type CartItems {
	carts: [Cart]
}

type CartWatchData {
	user_id: String
	watch_id: Int
	count: Int
	price: Int
	watch_data: Watch
}

type Mutation {
	addWatch(
		watch_id: Int!,
		name: String!,
		brand: String!,
		price: Int!,
		category: String!,
		description: String!
	): Watch
	addCart(user_id: String!, watch_id: Int!, count: Int!): Cart
	addUser(email: String!): User
	getUser(email: String!): User
	getUserWatchCount(user_id: String!, watch_id: Int!): CartCount
}

type Query {
	getWatches: WatchItems
	getWatch(watch_id: Int!): Watch
	getCarts(user_id: String!, watch_id: Int!): CartWatchData
	getUserOrders(user_id: String!): CartItems
}

type Watch {
	watch_id: Int
	name: String
	brand: String
	category: String
	price: Int
	description: String
}

type WatchItems {
	watches: [Watch]
}

schema {
	query: Query
	mutation: Mutation
}